CREATE TABLE IF NOT EXISTS USERS (
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  image TEXT,
  image_medium TEXT,
  pool TEXT NOT NULL,
  lang TEXT NOT NULL DEFAULT 'fr',
  active TEXT NOT NULL DEFAULT 0,
  campus INTEGER NOT NULL DEFAULT 1,
  tag TEXT DEFAULT 'NULL',
  custom_image_link TEXT DEFAULT 'NULL',
  note_access INTEGER NOT NULL DEFAULT 0
);
CREATE TABLE IF NOT EXISTS COOKIES (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  userid INTEGER NOT NULL,
  uuid TEXT NOT NULL UNIQUE,
  name TEXT DEFAULT 'NULL',
  creation TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY(userid) REFERENCES USERS(id)
);
CREATE TABLE IF NOT EXISTS FRIENDS (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  who INTEGER NOT NULL,
  has INTEGER NOT NULL,
  relation INTEGER DEFAULT 0,
  FOREIGN KEY(who) REFERENCES USERS(id),
  FOREIGN KEY(has) REFERENCES USERS(id)
);
CREATE TABLE IF NOT EXISTS DEAD_PC (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  issuer INTEGER NOT NULL,
  station TEXT NOT NULL,
  issue INTEGER NOT NULL,
  solved INTEGER NOT NULL DEFAULT 0,
  since TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY(issuer) REFERENCES USERS(id)
);
CREATE TABLE IF NOT EXISTS PROFILES (
  userid INTEGER PRIMARY KEY,
  website TEXT NOT NULL DEFAULT '',
  github TEXT NOT NULL DEFAULT '',
  discord TEXT NOT NULL DEFAULT '',
  recit TEXT NOT NULL DEFAULT '',
  FOREIGN KEY(userid) REFERENCES USERS(id)
);
CREATE TABLE IF NOT EXISTS THEME (
  userid INTEGER PRIMARY KEY,
  javascript TEXT DEFAULT 'NULL',
  css TEXT DEFAULT 'NULL',
  enabled INTEGER NOT NULL DEFAULT 0,
  FOREIGN KEY(userid) REFERENCES USERS(id)
);
CREATE TABLE IF NOT EXISTS WHITELIST (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id INTEGER NOT NULL UNIQUE,
  user_login TEXT NOT NULL UNIQUE,
  FOREIGN KEY(id) REFERENCES USERS(id)
);
CREATE TABLE IF NOT EXISTS PERMISSIONS (
  user_id INTEGER PRIMARY KEY,
  level INTEGER NOT NULL DEFAULT 0,
  show_tag INTEGER NOT NULL DEFAULT 0,
  tag TEXT DEFAULT 'admin',
  FOREIGN KEY(user_id) REFERENCES USERS(id)
);
CREATE TABLE IF NOT EXISTS PISCINES (
  id INTEGER PRIMARY KEY,
  campus INTEGER NOT NULL DEFAULT 1,
  cluster TEXT NOT NULL
);
CREATE TABLE IF NOT EXISTS SILENTS (
  id INTEGER PRIMARY KEY,
  campus INTEGER DEFAULT 1,
  cluster TEXT NOT NULL
);
CREATE TABLE IF NOT EXISTS TUTOR_STATION (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  campus INTEGER DEFAULT 1,
  station TEXT UNIQUE
);
CREATE TABLE IF NOT EXISTS TUTORS (
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  FOREIGN KEY(id) REFERENCES USERS(id)
);
CREATE TABLE IF NOT EXISTS PISCINE_DATES (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  month TEXT NOT NULL,
  year TEXT NOT NULL
);
CREATE TABLE IF NOT EXISTS NOTES (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  who INTEGER NOT NULL,
  author INTEGER NOT NULL,
  text TEXT NOT NULL,
  at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP,
  last_edited TEXT,
  last_edited_by INTEGER,
  FOREIGN KEY(who) REFERENCES USERS(id),
  FOREIGN KEY(author) REFERENCES USERS(id),
  FOREIGN KEY(last_edited_by) REFERENCES USERS(id)
);
CREATE UNIQUE INDEX IF NOT EXISTS _e8b6b97e4cd14ca4868815059b60d4d7 ON FRIENDS (who, has);
CREATE UNIQUE INDEX IF NOT EXISTS _54791e027b6a44539b3d14167e389f98 ON DEAD_PC (issuer, station);
